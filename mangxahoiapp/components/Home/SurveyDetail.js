import React, { useState, useEffect, useContext } from "react";
import { View, Text, ScrollView, StyleSheet, Button, Alert } from "react-native";
import { MyUserContext } from "../../configs/MyUserContext";
import APIs, { endpoints } from "../../configs/APIs";
import { RadioButton } from "react-native-paper";

const SurveyDetail = ({ route, navigation }) => {
  const user = useContext(MyUserContext);
  const { survey } = route.params;
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [loading, setLoading] = useState(true);
  const [surveyCompleted, setSurveyCompleted] = useState(false); // Tr·∫°ng th√°i kh·∫£o s√°t ƒë√£ ho√†n th√†nh

  useEffect(() => {
    const loadSurveyData = async () => {
        if (!user || !user.id) {
            console.log("üö® Kh√¥ng t√¨m th·∫•y user.id, ki·ªÉm tra l·∫°i ƒëƒÉng nh·∫≠p!");
            return;
        }

        try {
            console.log(`üì• ƒêang t·∫£i d·ªØ li·ªáu kh·∫£o s√°t cho user ID: ${user.id}...`);

            // L·∫•y danh s√°ch c√¢u h·ªèi
            const questionRes = await APIs.get(endpoints["cauhois"]);
            const filteredQuestions = questionRes.data.filter(q => q.khaoSat === survey.id);
            setQuestions(filteredQuestions);
            setAnswers(filteredQuestions.reduce((acc, q) => ({ ...acc, [q.id]: null }), {}));

            // Ki·ªÉm tra xem user hi·ªán t·∫°i ƒë√£ l√†m kh·∫£o s√°t ch∆∞a
            console.log("üì• ƒêang ki·ªÉm tra kh·∫£o s√°t ƒë√£ ho√†n th√†nh c·ªßa user...");
            const response = await APIs.get(`${endpoints["tralois"]}?nguoiTraLoi=${user.id}`);
            
            // Log d·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ API
            console.log("üìä API Tr·∫£ l·ªùi kh·∫£o s√°t:", response.data);

            const userSurveys = response.data.filter(traloi => traloi.nguoiTraLoi === user.id && traloi.khaoSat === survey.id);

            if (userSurveys.length > 0) {
                console.log("‚úÖ User ƒë√£ ho√†n th√†nh kh·∫£o s√°t n√†y tr∆∞·ªõc ƒë√≥.");
                setSurveyCompleted(true);
            } else {
                console.log("üÜï User ch∆∞a ho√†n th√†nh kh·∫£o s√°t, c√≥ th·ªÉ l√†m.");
                setSurveyCompleted(false);
            }

        } catch (error) {
            console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu kh·∫£o s√°t:", error);
        } finally {
            setLoading(false);
        }
    };

    loadSurveyData();
  }, [survey.id, user]); // Khi user thay ƒë·ªïi, d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫°i



  const handleAnswerChange = (questionId, value) => {
    setAnswers(prev => ({ ...prev, [questionId]: value }));
  };

  const handleSubmit = async () => {
    if (surveyCompleted) {
      Alert.alert("B·∫°n ƒë√£ ho√†n th√†nh b√†i kh·∫£o s√°t", "B·∫°n kh√¥ng th·ªÉ l√†m l·∫ßn n·ªØa.");
      return;
    }

    const isCompleted = Object.values(answers).every(ans => ans !== null);
    if (!isCompleted) {
      Alert.alert("L·ªói", "Vui l√≤ng tr·∫£ l·ªùi t·∫•t c·∫£ c√¢u h·ªèi.");
      return;
    }

    try {
      const luaChonRes = await APIs.get(endpoints["luachons"]);
      const luaChonList = luaChonRes.data;

      for (const [questionId, answer] of Object.entries(answers)) {
        const luaChonObj = luaChonList.find(lc => lc.cauHoi === parseInt(questionId) && lc.noiDung === answer);
        if (!luaChonObj) {
          console.error(`Kh√¥ng t√¨m th·∫•y l·ª±a ch·ªçn ph√π h·ª£p cho c√¢u h·ªèi ${questionId}`);
          continue;
        }

        const payload = {
          khaoSat: survey.id,
          nguoiTraLoi: user.id,
          cauHoi: questionId,
          luaChon: luaChonObj.id
        };

        await APIs.post(endpoints["tralois"], payload);
      }

      setSurveyCompleted(true); // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ ho√†n th√†nh

      // Hi·ªÉn th·ªã th√¥ng b√°o v√† quay l·∫°i m√†n h√¨nh danh s√°ch kh·∫£o s√°t
      Alert.alert("Th√†nh c√¥ng", "B·∫°n ƒë√£ ho√†n th√†nh kh·∫£o s√°t!", [
          {
              text: "OK",
              onPress: () => navigation.navigate("Surveys") // Quay l·∫°i danh s√°ch kh·∫£o s√°t
          }
      ]);
    } catch (error) {
      console.error("L·ªói khi g·ª≠i kh·∫£o s√°t:", error.response?.data || error.message);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ g·ª≠i kh·∫£o s√°t.");
    }
  };

  return (
    <ScrollView style={styles.container}>
      <Text style={styles.header}>{survey.tieuDe}</Text>
      <Text style={styles.description}>{survey.moTa}</Text>

      {loading ? <Text style={styles.loadingText}>ƒêang t·∫£i c√¢u h·ªèi...</Text> : null}

      {surveyCompleted ? (
        <Text style={styles.completedText}>B·∫°n ƒë√£ ho√†n th√†nh kh·∫£o s√°t. B·∫°n kh√¥ng th·ªÉ l√†m l·∫ßn n·ªØa.</Text>
      ) : (
        questions.map(question => (
          <View key={question.id} style={styles.questionContainer}>
            <Text style={styles.questionText}>{question.noiDung}</Text>
            <RadioButton.Group onValueChange={value => handleAnswerChange(question.id, value)} value={answers[question.id]}>
              <View style={styles.optionContainer}>
                <RadioButton value="C√≥" />
                <Text>C√≥</Text>
              </View>
              <View style={styles.optionContainer}>
                <RadioButton value="Kh√¥ng" />
                <Text>Kh√¥ng</Text>
              </View>
            </RadioButton.Group>
          </View>
        ))
      )}

      <Button
        title={surveyCompleted ? "B·∫°n ƒë√£ ho√†n th√†nh kh·∫£o s√°t" : "Ho√†n th√†nh"}
        onPress={handleSubmit}
        disabled={surveyCompleted}
      />
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10, backgroundColor: "#fff" },
  header: { fontSize: 22, fontWeight: "bold", marginBottom: 10, textAlign: "center" },
  description: { fontSize: 16, color: "#555", marginBottom: 20, textAlign: "center" },
  loadingText: { textAlign: "center", fontSize: 16, marginTop: 20 },
  completedText: { textAlign: "center", fontSize: 18, fontWeight: "bold", color: "red", marginVertical: 20 },
  questionContainer: { marginBottom: 20 },
  questionText: { fontSize: 16, fontWeight: "bold", marginBottom: 10 },
  optionContainer: { flexDirection: "row", alignItems: "center", marginBottom: 5 },
});

export default SurveyDetail;
